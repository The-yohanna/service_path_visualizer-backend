"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventToPromise = require("event-to-promise");
const events_1 = require("events");
const mongodb_1 = require("mongodb");
const assigner_interfaces_1 = require("./assigner.interfaces");
const LocalStateStore_1 = require("./LocalStateStore");
const utils_1 = require("./utils");
const assign_fields_ids_1 = require("./utils/assign-fields-ids");
const configure_schema_1 = require("./utils/configure-schema");
const get_next_ids_1 = require("./utils/get-next-ids");
/**
 * The numbers also depict what you receive upon from readyState
 * @event 1. ready - If the init process is complete
 * @event 2. init - Initialising the idAssigner
 * @event 0. unready - Init process not started
 * @event -1. error - Init process error out
 */
class MongooseIdAssigner extends events_1.EventEmitter {
    constructor(schema, options) {
        super();
        if (!schema) {
            throw utils_1.PluginError('Schema for the IdAssigner Must be provided!');
        }
        if (!options || (options && !options.modelName)) {
            throw utils_1.PluginError('Plugin Options must be specified, with schema modelName!');
        }
        const modelName = options.modelName;
        if (LocalStateStore_1.localStateStore.getState(schema)) {
            throw utils_1.PluginError('Provided Schema already has an Assigner Instance!', modelName);
        }
        this.schema = schema;
        this.modelName = modelName;
        this.discriminatorKey = schema.get('discriminatorKey');
        this.retryTime = 20;
        this.retryMillis = 20; // after 20 millis
        this.options = utils_1.normaliseOptions(modelName, options);
        this.appendState({
            modelName: this.modelName,
            readyState: 0,
            idAssigner: this,
        });
        configure_schema_1.configureSchema(this);
    }
    get readyState() {
        return this.state.readyState;
    }
    get state() {
        return LocalStateStore_1.localStateStore.getState(this.schema);
    }
    get collection() {
        const { model, error } = this.state;
        if (!model) {
            if (error) {
                throw utils_1.PluginError('Cannot read Model, Error At Initialisation ' + error);
            }
            else {
                throw utils_1.PluginError('Cannot read Model, Not Initialised');
            }
        }
        return model.db.collection(LocalStateStore_1.localStateStore.getCollName());
    }
    static plugin(schema, options) {
        return new MongooseIdAssigner(schema, options);
    }
    refreshOptions() {
        return assign_fields_ids_1.refreshOptions(this);
    }
    getFieldConfig(field, discriminator) {
        if (discriminator && this.options.discriminators) {
            for (const [key, value] of this.options.discriminators.entries()) {
                if (key === discriminator) {
                    for (const [k, v] of value.entries()) {
                        if (k === field) {
                            return v;
                        }
                    }
                }
            }
        }
        if (this.options.fields) {
            for (const [k, v] of this.options.fields.entries()) {
                if (k === field) {
                    return v;
                }
            }
        }
        return;
    }
    getNextId(field, discriminator) {
        return __awaiter(this, void 0, void 0, function* () {
            const fieldConfig = this.getFieldConfig(field, discriminator);
            if (!fieldConfig) {
                throw utils_1.PluginError(`Requested Field, [${field}] does not have a Field Configuration!`, this.modelName);
            }
            switch (fieldConfig.type) {
                case assigner_interfaces_1.FieldConfigTypes.ObjectId:
                    return new mongodb_1.ObjectId();
                case assigner_interfaces_1.FieldConfigTypes.UUID:
                    return get_next_ids_1.getNextIdUUID(fieldConfig);
                case assigner_interfaces_1.FieldConfigTypes.Number:
                    yield this.refreshOptions();
                    return get_next_ids_1.getNextIdNumber(field, this, fieldConfig, '', 0, true);
                case assigner_interfaces_1.FieldConfigTypes.String:
                    yield this.refreshOptions();
                    return get_next_ids_1.getNextIdString(field, this, fieldConfig, '', 0, true);
            }
        });
    }
    appendState(state) {
        LocalStateStore_1.localStateStore.setState(this.schema, Object.assign(Object.assign({}, this.state), state));
    }
    initialise(modelInstance) {
        if (this.state.readyState === 0) {
            this.appendState({ readyState: 2 });
            return utils_1.initialiseOptions(modelInstance, this);
        }
        return this.state.readyState === 1
            ? Promise.resolve(1)
            : eventToPromise(this, 'ready').then(() => 1);
    }
}
exports.MongooseIdAssigner = MongooseIdAssigner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9uZ29vc2VJZEFzc2lnbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL01vbmdvb3NlSWRBc3NpZ25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLG1EQUFtRDtBQUNuRCxtQ0FBc0M7QUFDdEMscUNBQXVEO0FBRXZELCtEQU0rQjtBQUMvQix1REFBaUU7QUFDakUsbUNBQTJFO0FBQzNFLGlFQUEyRDtBQUMzRCwrREFBMkQ7QUFDM0QsdURBQXVGO0FBYXZGOzs7Ozs7R0FNRztBQUNILE1BQWEsa0JBQW1CLFNBQVEscUJBQVk7SUFTbEQsWUFBWSxNQUFjLEVBQUUsT0FBOEI7UUFDeEQsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxtQkFBVyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7U0FDbEU7UUFDRCxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQy9DLE1BQU0sbUJBQVcsQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1NBQy9FO1FBRUQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUVwQyxJQUFJLGlDQUFlLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sbUJBQVcsQ0FBQyxtREFBbUQsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNuRjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFdkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsQ0FBQyxrQkFBa0I7UUFDekMsSUFB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