"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assigner_interfaces_1 = require("../assigner.interfaces");
const others_1 = require("./others");
const type_guards_1 = require("./type-guards");
function checkFieldConfig(modelName, field, config) {
    if (type_guards_1.isObjectId(config)) {
        return false;
    }
    if (type_guards_1.isUUID(config)) {
        if (!config.version) {
            config.version = 1;
        }
        config.asBinary = !!config.asBinary;
        if (!(config.version === 4 || config.version === 1)) {
            throw others_1.PluginError(`UUID version must be either 1 or 4!`, modelName, field);
        }
        return false;
    }
    if (!config.nextId || typeof config.nextId !== config.type.toLowerCase()) {
        throw others_1.PluginError('nextId is required, should have as type ' + config.type, modelName, field);
    }
    if (config.nextIdFunction &&
        typeof config.nextIdFunction !== 'function') {
        throw others_1.PluginError('nextIdFunction must be a `Function`!', modelName, field);
    }
    if (type_guards_1.isNumber(config)) {
        if (config.incrementBy) {
            throw others_1.PluginError('incrementBy must be of type `number`!', modelName, field);
        }
        if (config.nextIdFunction &&
            typeof config.nextIdFunction(config.nextId, config.incrementBy) !== 'number') {
            throw others_1.PluginError('nextIdFunction must return nextId of type `number`!', modelName, field);
        }
        return true;
    }
    if (type_guards_1.isString(config) && config.nextIdFunction) {
        if (typeof config.nextIdFunction(config.nextId) !== 'string') {
            throw others_1.PluginError('nextIdFunction must return nextId of type `string`!', modelName, field);
        }
        return true;
    }
    return true;
}
function normaliseFieldsConfigMap(modelName, fieldsConfigMap) {
    if (!fieldsConfigMap) {
        return { network: false, fields: undefined };
    }
    const rObject = {
        network: false,
        fields: new Map(),
    };
    const fields = rObject.fields;
    for (const field in fieldsConfigMap) {
        if (!fieldsConfigMap.hasOwnProperty(field)) {
            continue;
        }
        let fieldConfig = fieldsConfigMap[field];
        if (typeof fieldConfig === 'boolean') {
            fieldConfig = { type: assigner_interfaces_1.FieldConfigTypes.ObjectId };
        }
        if (typeof fieldConfig === 'number') {
            rObject.network = true;
            fieldConfig = { type: assigner_interfaces_1.FieldConfigTypes.Number, nextId: fieldConfig };
        }
        if (typeof fieldConfig === 'string') {
            if (assigner_interfaces_1.FieldConfigTypes[fieldConfig]) {
                switch (fieldConfig) {
                    case assigner_interfaces_1.FieldConfigTypes.ObjectId:
                        fieldConfig = { type: assigner_interfaces_1.FieldConfigTypes.ObjectId };
                        break;
                    case assigner_interfaces_1.FieldConfigTypes.UUID:
                    case assigner_interfaces_1.FieldConfigTypes.GUID:
                        fieldConfig = { type: assigner_interfaces_1.FieldConfigTypes.UUID, version: 1 };
                        break;
                    default:
                        // Number and String
                        throw others_1.PluginError(`nextId not provided for field type ${fieldConfig}!`, modelName, field);
                }
            }
            else {
                rObject.network = true;
                fieldConfig = { type: assigner_interfaces_1.FieldConfigTypes.String, nextId: fieldConfig };
            }
        }
        if (
        // if not converted to Object already
        typeof fieldConfig === 'string' ||
            (fieldConfig && typeof fieldConfig !== 'object') ||
            !assigner_interfaces_1.FieldConfigTypes[fieldConfig.type]) {
            throw others_1.PluginError(`Unknown FieldConfigType ${fieldConfig}`, modelName, field);
        }
        if (fieldConfig && typeof fieldConfig === 'object') {
            const network = checkFieldConfig(modelName, field, fieldConfig);
            if (network) {
                rObject.network = true;
            }
            fields.set(field, fieldConfig);
        }
    }
    return rObject;
}
function normaliseOptions(modelName, options) {
    if (!modelName) {
        throw others_1.PluginError('Plugin `modelName` must be defined!');
    }
    const normalised = Object.assign({ modelName }, normaliseFieldsConfigMap(modelName, options ? options.fields : undefined));
    normalised.fields = normalised.fields ? normalised.fields : new Map();
    // set default _id field
    if (!normalised.fields.has('_id')) {
        normalised.fields.set('_id', { type: assigner_interfaces_1.FieldConfigTypes.ObjectId });
    }
    // cannot rely on discriminatorKey as its default __t
    if (options && options.discriminators) {
        const discriminatorMap = new Map();
        for (const dName in options.discriminators) {
            if (!options.discriminators.hasOwnProperty(dName)) {
                continue;
            }
            const discriminator = options.discriminators[dName];
            const rObjectDNormalisedFields = normaliseFieldsConfigMap(dName, discriminator);
            if (!rObjectDNormalisedFields.fields) {
                continue;
            }
            if (rObjectDNormalisedFields.network) {
                normalised.network = true;
            }
            discriminatorMap.set(dName, rObjectDNormalisedFields.fields);
        }
        if (discriminatorMap.size > 0) {
            normalised.discriminators = discriminatorMap;
        }
    }
    return normalised;
}
exports.normaliseOptions = normaliseOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXNlLW9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvbm9ybWFsaXNlLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxnRUFNZ0M7QUFFaEMscUNBQXVDO0FBQ3ZDLCtDQUF1RTtBQUV2RSxTQUFTLGdCQUFnQixDQUFDLFNBQWlCLEVBQUUsS0FBYSxFQUFFLE1BQW1CO0lBQzdFLElBQUksd0JBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN0QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxvQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUVwQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ25ELE1BQU0sb0JBQVcsQ0FBQyxxQ0FBcUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDNUU7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxDQUFFLE1BQWMsQ0FBQyxNQUFNLElBQUksT0FBUSxNQUFjLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7UUFDMUYsTUFBTSxvQkFBVyxDQUFDLDBDQUEwQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQy9GO0lBRUQsSUFDRyxNQUE0QixDQUFDLGNBQWM7UUFDNUMsT0FBUSxNQUE0QixDQUFDLGNBQWMsS0FBSyxVQUFVLEVBQ2xFO1FBQ0EsTUFBTSxvQkFBVyxDQUFD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