"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
const get_next_ids_1 = require("./get-next-ids");
const initialise_options_1 = require("./initialise-options");
const others_1 = require("./others");
const type_guards_1 = require("./type-guards");
function refreshOptions(assigner, retries = 0) {
    return __awaiter(this, void 0, void 0, function* () {
        const collection = assigner.collection;
        try {
            const freshOptions = yield collection.findOne({
                modelName: assigner.modelName,
            });
            if (!freshOptions && assigner.options.network && assigner.readyState) {
                if (retries < 10) {
                    yield others_1.waitPromise(10 * retries); // wait and retry
                    return refreshOptions(assigner, ++retries);
                }
                return Promise.reject(others_1.PluginError('Stored Options not Found for Ready Model!', assigner.modelName));
            }
            // todo Handle this case
            if (!freshOptions) {
                return Promise.reject(others_1.PluginError('AssignId unexpectedly not Ready', assigner.modelName));
            }
            initialise_options_1.checkAndUpdateOptions(assigner.options, freshOptions);
        }
        catch (e) {
            return Promise.reject(e);
        }
    });
}
exports.refreshOptions = refreshOptions;
function assignIdNetwork(idAssigner, doc) {
    return __awaiter(this, void 0, void 0, function* () {
        let dFields;
        if (idAssigner.options.discriminators) {
            if (doc[idAssigner.discriminatorKey]) {
                dFields = idAssigner.options.discriminators.get(doc[idAssigner.discriminatorKey]);
            }
        }
        if (!idAssigner.options.fields && !dFields) {
            return;
        }
        try {
            const fields = idAssigner.options.fields;
            yield idAssigner.refreshOptions();
            if (fields) {
                for (const [field, config] of fields.entries()) {
                    if (dFields && dFields.get(field)) {
                        continue;
                    }
                    if (type_guards_1.isObjectId(config)) {
                        doc[field] = new mongodb_1.ObjectId();
                        continue;
                    }
                    if (type_guards_1.isUUID(config)) {
                        doc[field] = get_next_ids_1.getNextIdUUID(config);
                        continue;
                    }
                    if (type_guards_1.isNumber(config)) {
                        doc[field] = yield get_next_ids_1.getNextIdNumber(field, idAssigner, config);
                        continue;
                    }
                    if (type_guards_1.isString(config)) {
                        doc[field] = yield get_next_ids_1.getNextIdString(field, idAssigner, config);
                    }
                }
            }
            if (dFields) {
                for (const [field, config] of dFields.entries()) {
                    if (type_guards_1.isObjectId(config)) {
                        doc[field] = new mongodb_1.ObjectId();
                        continue;
                    }
                    if (type_guards_1.isUUID(config)) {
                        doc[field] = get_next_ids_1.getNextIdUUID(config);
                        continue;
                    }
                    if (type_guards_1.isNumber(config)) {
                        doc[field] = yield get_next_ids_1.getNextIdNumber(field, idAssigner, config, doc[idAssigner.discriminatorKey]);
                        continue;
                    }
                    if (type_guards_1.isString(config)) {
                        doc[field] = yield get_next_ids_1.getNextIdString(field, idAssigner, config, doc[idAssigner.discriminatorKey]);
                    }
                }
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
    });
}
exports.assignIdNetwork = assignIdNetwork;
function assignIdNoNetwork(idAssigner, doc) {
    let dFields;
    if (idAssigner.options.discriminators) {
        if (doc[idAssigner.discriminatorKey]) {
            dFields = idAssigner.options.discriminators.get(doc[idAssigner.discriminatorKey]);
        }
    }
    const fields = idAssigner.options.fields;
    if (!fields && !dFields) {
        return;
    }
    if (fields) {
        for (const [field, config] of fields.entries()) {
            if (dFields && dFields.get(field)) {
                continue;
            }
            if (type_guards_1.isObjectId(config)) {
                doc[field] = new mongodb_1.ObjectId();
                continue;
            }
            if (type_guards_1.isUUID(config)) {
                doc[field] = get_next_ids_1.getNextIdUUID(config);
            }
        }
    }
    if (dFields) {
        for (const [field, config] of dFields.entries()) {
            if (type_guards_1.isObjectId(config)) {
                doc[field] = new mongodb_1.ObjectId();
                continue;
            }
            if (type_guards_1.isUUID(config)) {
                doc[field] = get_next_ids_1.getNextIdUUID(config);
            }
        }
    }
}
exports.assignIdNoNetwork = assignIdNoNetwork;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzaWduLWZpZWxkcy1pZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvYXNzaWduLWZpZWxkcy1pZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBbUM7QUFJbkMsaURBQWlGO0FBQ2pGLDZEQUE2RDtBQUM3RCxxQ0FBb0Q7QUFDcEQsK0NBQXVFO0FBRXZFLFNBQXNCLGNBQWMsQ0FBQyxRQUE0QixFQUFFLE9BQU8sR0FBRyxDQUFDOztRQUM1RSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO1FBRXZDLElBQUk7WUFDRixNQUFNLFlBQVksR0FBRyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQW9CO2dCQUMvRCxTQUFTLEVBQUUsUUFBUSxDQUFDLFNBQVM7YUFDOUIsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLFlBQVksSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO2dCQUNwRSxJQUFJLE9BQU8sR0FBRyxFQUFFLEVBQUU7b0JBQ2hCLE1BQU0sb0JBQVcsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7b0JBQ2xELE9BQU8sY0FBYyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUM1QztnQkFDRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQ25CLG9CQUFXLENBQUMsMkNBQTJDLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUM3RSxDQUFDO2FBQ0g7WUFFRCx3QkFBd0I7WUFDeEIsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDakIsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLG9CQUFXLENBQUMsaUNBQWlDLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7YUFDM0Y7WUFFRCwwQ0FBcUIsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLFlBQW1CLENBQUMsQ0FB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