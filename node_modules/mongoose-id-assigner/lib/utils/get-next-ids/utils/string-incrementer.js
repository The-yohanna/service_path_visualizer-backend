"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const others_1 = require("../../others");
/**
 * Increments a given id from nextId
 *
 * @param {string} nextId
 * @param {string} separator
 * @return {string}
 */
function stringIncrementer(nextId, separator = '-') {
    const maxLength = nextId.length;
    let firstDash = -1; // consider firstDash maxLength Position
    let lastSig = maxLength + 1; // Position of last significant figure
    for (let i = maxLength - 1; i >= 0; i--) {
        if (nextId[i] === separator) {
            firstDash = i;
            if (maxLength - 1 === i) {
                lastSig = maxLength + 1; // case 99909-
            }
            break;
        }
        else if (/[1-9]/.test(nextId[i])) {
            lastSig = i;
        }
        else if (nextId[i] === '0' && maxLength - 1 === i) {
            lastSig = maxLength; // case 99909-0
        }
    }
    let digits = nextId.substr(firstDash + 1);
    if (isNaN(digits++)) {
        throw others_1.PluginError(`Wrong nextId format, must end with number from separator. ` +
            `e.g separator: - nextIds => 9434034, 4dc34-34, IBSN-093JDS-number. ` +
            `Could not increment from nextId: ${nextId}, separator: : (${separator})`);
    }
    // Get next Significant figure (10 if count = 1)
    const nextSig = Math.pow(10, maxLength - lastSig);
    // if has moved up one digit(significant figure) and if lashDash will
    // be cut out at location ltCount -1
    if (digits >= nextSig) {
        return `${nextId.substr(0, lastSig - 1)}${digits}`;
    }
    return `${nextId.substr(0, lastSig)}${digits}`;
}
exports.stringIncrementer = stringIncrementer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLWluY3JlbWVudGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWxzL2dldC1uZXh0LWlkcy91dGlscy9zdHJpbmctaW5jcmVtZW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBMkM7QUFFM0M7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQUMsTUFBYyxFQUFFLFNBQVMsR0FBRyxHQUFHO0lBQy9ELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFFaEMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3Q0FBd0M7SUFDNUQsSUFBSSxPQUFPLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLHNDQUFzQztJQUVuRSxLQUFLLElBQUksQ0FBQyxHQUFHLFNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN2QyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDM0IsU0FBUyxHQUFHLENBQUMsQ0FBQztZQUNkLElBQUksU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3ZCLE9BQU8sR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsY0FBYzthQUN4QztZQUNELE1BQU07U0FDUDthQUFNLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1NBQ2I7YUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbkQsT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLGVBQWU7U0FDckM7S0FDRjtJQUVELElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBUSxDQUFDO0lBRWpELElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7UUFDbkIsTUFBTSxvQkFBVyxDQUNmLDREQUE0RDtZQUMxRCxxRUFBcUU7WUFDckUsb0NBQW9DLE1BQU0sbUJBQW1CLFNBQVMsR0FBRyxDQUM1RSxDQUFDO0tBQ0g7SUFFRCxnREFBZ0Q7SUFDaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDO0lBRWxELHFFQUFxRTtJQUNyRSxvQ0FBb0M7SUFDcEMsSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQ3JCLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUM7S0FDcEQ7SUFFRCxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDakQsQ0FBQztBQXhDRCw4Q0F3Q0MifQ==