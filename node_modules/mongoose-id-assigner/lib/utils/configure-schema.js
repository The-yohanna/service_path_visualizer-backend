"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assign_fields_ids_1 = require("./assign-fields-ids");
const others_1 = require("./others");
function configureIndexes(assignId) {
    const schema = assignId.schema;
    const fields = assignId.options.fields;
    if (!fields) {
        return;
    }
    for (const [field, config] of fields.entries()) {
        if (field === '_id') {
            continue;
        }
        if (config.index) {
            schema.index({ [field]: -1 }, { unique: config.unique });
        }
    }
}
function configurePreSave(assigner) {
    const options = assigner.options;
    const schema = assigner.schema;
    schema.pre('save', function (next) {
        return __awaiter(this, void 0, void 0, function* () {
            const doc = this;
            try {
                if (doc.isNew) {
                    if (assigner.state.error) {
                        return Promise.reject(others_1.PluginError(`Cannot assign field ids, Error on Init. [${assigner.state.error}]`, assigner.modelName));
                    }
                    if (assigner.readyState !== 1) {
                        yield assigner.initialise(this.model(assigner.modelName));
                    }
                    if (!options.network) {
                        assign_fields_ids_1.assignIdNoNetwork(assigner, doc);
                    }
                    else {
                        yield assign_fields_ids_1.assignIdNetwork(assigner, doc);
                    }
                }
            }
            catch (e) {
                return next(e);
            }
            return next();
        });
    });
}
function configureSchema(idAssigner) {
    configureIndexes(idAssigner);
    configurePreSave(idAssigner);
}
exports.configureSchema = configureSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLXNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jb25maWd1cmUtc2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUEsMkRBQXlFO0FBQ3pFLHFDQUF1QztBQUV2QyxTQUFTLGdCQUFnQixDQUFDLFFBQTRCO0lBQ3BELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDL0IsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFFdkMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE9BQU87S0FDUjtJQUVELEtBQUssTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDOUMsSUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFO1lBQ25CLFNBQVM7U0FDVjtRQUVELElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNoQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQzFEO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxRQUE0QjtJQUNwRCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQ2pDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFFL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBK0IsSUFBSTs7WUFDcEQsTUFBTSxHQUFHLEdBQUcsSUFBVyxDQUFDO1lBRXhCLElBQUk7Z0JBQ0YsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO29CQUNiLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7d0JBQ3hCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FDbkIsb0JBQVcsQ0FDVCw0Q0FBNEMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsRUFDbkUsUUFBUSxDQUFDLFNBQVMsQ0FDbkIsQ0FDRixDQUFDO3FCQUNIO29CQUVELElBQUksUUFBUSxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7d0JBQzdCLE1BQU0sUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO3FCQUMzRDtvQkFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTt3QkFDcEIscUNBQWlCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO3FCQUNsQzt5QkFBTTt3QkFDTCxNQUFNLG1DQUFlLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO3FCQUN0QztpQkFDRjthQUNGO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEI7WUFFRCxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ2hCLENBQUM7S0FBQSxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLFVBQThCO0lBQzVELGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdCLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFIRCwwQ0FHQyJ9