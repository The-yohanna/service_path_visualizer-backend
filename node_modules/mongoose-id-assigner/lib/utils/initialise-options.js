"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventToPromise = require("event-to-promise");
const LocalStateStore_1 = require("../LocalStateStore");
const others_1 = require("./others");
const type_guards_1 = require("./type-guards");
function checkAndUpdateFieldConfigMap(fieldConfigMap, freshFieldConfigObj) {
    if (!freshFieldConfigObj || !fieldConfigMap) {
        return true;
    }
    let replace = true;
    for (const [field, config] of fieldConfigMap.entries()) {
        const oldConfig = freshFieldConfigObj[field];
        if (!oldConfig) {
            replace = true;
        }
        if (type_guards_1.isNumber(config) && type_guards_1.isNumber(oldConfig)) {
            if (oldConfig && config.nextId !== oldConfig.nextId) {
                replace = true;
                config.nextId = oldConfig.nextId;
            }
        }
        if (type_guards_1.isString(config) && type_guards_1.isString(oldConfig)) {
            if (oldConfig && config.nextId !== oldConfig.nextId) {
                replace = true;
                config.nextId = oldConfig.nextId;
            }
        }
        // fixme sort this issue out
        // throw error, or if dev tag, if reset true... then override
        // updated info on README.md until better fix, override
        if (config.type !== oldConfig.type) {
            replace = true;
        }
    }
    return replace;
}
// checks if fieldConfigs changed, update field nextIds only
// checks if AssignerOptions contains no field configs, replace = false
function checkAndUpdateOptions(options, freshOptions) {
    if (!freshOptions || (!freshOptions.fields && !freshOptions.discriminators)) {
        if (!options.fields && !options.discriminators) {
            return { abort: true, options };
        }
        else {
            options.timestamp = null;
            return { replace: true, options };
        }
    }
    // set timestamp
    options.timestamp = freshOptions.timestamp;
    // delete old options if new doesn't need it
    if (!options || (!options.fields && !options.discriminators)) {
        return { delete: true, options };
    }
    const rObject = { replace: true, options };
    rObject.replace = checkAndUpdateFieldConfigMap(options.fields, freshOptions.fields);
    // if discriminator options available
    if (options.discriminators) {
        for (const [dName, fieldConfigMap] of options.discriminators.entries()) {
            const replace = checkAndUpdateFieldConfigMap(fieldConfigMap, freshOptions ? freshOptions.discriminators[dName] : undefined);
            if (replace) {
                rObject.replace = true;
            }
        }
    }
    return rObject;
}
exports.checkAndUpdateOptions = checkAndUpdateOptions;
function refreshDBOptions(mongooseModel, idAssigner, retries = 0) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = idAssigner.options;
        try {
            const freshOptions = yield mongooseModel.db
                .collection(LocalStateStore_1.localStateStore.getCollName())
                .findOne({ modelName: idAssigner.modelName });
            const mergedOptions = checkAndUpdateOptions(options, freshOptions);
            if (mergedOptions.abort) {
                idAssigner.appendState({
                    modelName: idAssigner.modelName,
                    readyState: 1,
                    model: mongooseModel,
                });
                return 1;
            }
            let update;
            if (mergedOptions.replace) {
                update = yield mongooseModel.db.collection(LocalStateStore_1.localStateStore.getCollName()).findOneAndReplace({
                    modelName: idAssigner.modelName,
                    timestamp: mergedOptions.options.timestamp,
                }, mergedOptions.options, {
                    upsert: true,
                });
            }
            else if (mergedOptions.delete) {
                update = yield mongooseModel.db.collection(LocalStateStore_1.localStateStore.getCollName()).findOneAndDelete({
                    modelName: idAssigner.modelName,
                    timestamp: mergedOptions.options.timestamp,
                });
                // new options requests deletion of old options
                // but those options have been updated by another process
                if (!update || !update.ok) {
                    return Promise.reject(others_1.PluginError('Error at initialisation, cannot delete old options, Still in use!', idAssigner.modelName));
                }
            }
            if (update && update.ok) {
                idAssigner.appendState({
                    readyState: 1,
                    model: mongooseModel,
                });
                return 1;
            }
            else {
                return Promise.reject(others_1.PluginError(`Initialisation error ${update}`, idAssigner.modelName));
            }
        }
        catch (e) {
            if (e.code === 11000) {
                if (retries > 30) {
                    throw others_1.PluginError('Initialisation error, maximum retries attained', idAssigner.modelName);
                }
                return refreshDBOptions(mongooseModel, idAssigner, ++retries);
            }
            return Promise.reject(e);
        }
    });
}
function dbInitialiseLogic(mongooseModel, idAssigner) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // create index, ensures no duplicates during upserts
            yield mongooseModel.db.collection(LocalStateStore_1.localStateStore.getCollName()).createIndex('modelName', {
                unique: true,
                background: false,
            });
            return yield refreshDBOptions(mongooseModel, idAssigner);
        }
        catch (e) {
            idAssigner.appendState({
                modelName: idAssigner.modelName,
                error: e,
                readyState: 3,
            });
            return 3;
        }
    });
}
function initialiseOptions(mongooseModel, idAssigner, retries = 0) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = idAssigner.options;
        if (!options.network) {
            idAssigner.appendState({
                modelName: idAssigner.modelName,
                model: mongooseModel,
                readyState: 1,
            });
            return 1;
        }
        // connecting
        if (mongooseModel.db.readyState === 2) {
            return yield eventToPromise(mongooseModel.db, 'connected').then(() => dbInitialiseLogic(mongooseModel, idAssigner));
            // connected
        }
        else if (mongooseModel.db.readyState === 1) {
            return yield dbInitialiseLogic(mongooseModel, idAssigner);
        }
        if (retries < 10) {
            try {
                // 3 - disconnecting, wait more
                // 0 - disconnected, wait less as connection can be back anytime.
                yield others_1.waitPromise((mongooseModel.db.readyState === 3 ? 500 : 100) * retries);
                return initialiseOptions(mongooseModel, idAssigner, ++retries);
            }
            catch (e) {
                return Promise.reject(e);
            }
        }
        else {
            throw others_1.PluginError('Initialisation failed, cannot establish db connection not established!');
        }
    });
}
exports.initialiseOptions = initialiseOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGlzZS1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2luaXRpYWxpc2Utb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLG1EQUFtRDtBQUduRCx3REFBcUQ7QUFFckQscUNBQW9EO0FBQ3BELCtDQUFtRDtBQVNuRCxTQUFTLDRCQUE0QixDQUNuQyxjQUF5QyxFQUN6QyxtQkFBeUI7SUFFekIsSUFBSSxDQUFDLG1CQUFtQixJQUFJLENBQUMsY0FBYyxFQUFFO1FBQzNDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFFbkIsS0FBSyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLGNBQWMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUN0RCxNQUFNLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNoQjtRQUVELElBQUksc0JBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxzQkFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzNDLElBQUksU0FBUyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDbkQsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDZixNQUFNLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7YUFDbEM7U0FDRjtRQUVELElBQUksc0JBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxzQkFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzNDLElBQUksU0FBUyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDbkQsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDZixNQUFNLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7YUFDbEM7U0FDRjtRQUVELDRCQUE0QjtRQUM1Qiw2REFBNkQ7UUFDN0QsdURBQXVEO1FBQ3ZELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO1lBQ2xDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDaEI7S0FDRjtJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCw0REFBNEQ7QUFDNUQsdUVBQXVFO0FBQ3ZFLFNBQWdCLHFCQUFxQixDQUNuQyxPQUEwQixFQUMxQixZQUFnQztJQUVoQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQzNFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRTtZQUM5QyxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztTQUNqQzthQUFNO1lBQ0wsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDekIsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7U0FDbkM7S0FDRjtJQUVELGdCQUFnQjtJQUNoQixPQUFPLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7SUFFM0MsNENBQTRDO0lBQzVDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUU7UUFDNUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7S0FDbEM7SUFFRCxNQUFNLE9BQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFFM0MsT0FBTyxDQUFDLE9BQU8sR0FBRyw0QkFBNEIsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwRixxQ0FBcUM7SUFDckMsSUFBSSxPQUFPLENBQUMsY0FBYyxFQUFFO1FBQzFCLEtBQUssTUFBTSxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3RFLE1BQU0sT0FBTyxHQUFHLDRCQUE0QixDQUMxQyxjQUFjLEVBQ2QsWUFBWSxDQUFDLENBQUMsQ0FBRSxZQUFvQixDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUN2RSxDQUFDO1lBRUYsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7YUFDeEI7U0FDRjtLQUNGO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQXhDRCxzREF3Q0M7QUFFRCxTQUFlLGdCQUFnQixDQUM3QixhQUE4QixFQUM5QixVQUE4QixFQUM5QixPQUFPLEdBQUcsQ0FBQzs7UUFFWCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDO1FBQ25DLElBQUk7WUFDRixNQUFNLFlBQVksR0FBRyxNQUFNLGFBQWEsQ0FBQyxFQUFFO2lCQUN4QyxVQUFVLENBQUMsaUNBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDekMsT0FBTyxDQUFDLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBRWhELE1BQU0sYUFBYSxHQUFHLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztZQUVuRSxJQUFJLGFBQWEsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3ZCLFVBQVUsQ0FBQyxXQUFXLENBQUM7b0JBQ3JCLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztvQkFDL0IsVUFBVSxFQUFFLENBQUM7b0JBQ2IsS0FBSyxFQUFFLGFBQWE7aUJBQ3JCLENBQUMsQ0FBQztnQkFFSCxPQUFPLENBQUMsQ0FBQzthQUNWO1lBRUQsSUFBSSxNQUFNLENBQUM7WUFFWCxJQUFJLGFBQWEsQ0FBQyxPQUFPLEVBQUU7Z0JBQ3pCLE1BQU0sR0FBRyxNQUFNLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGlDQUFlLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FDekY7b0JBQ0UsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTO29CQUMvQixTQUFTLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTO2lCQUMzQyxFQUNELGFBQWEsQ0FBQyxPQUFPLEVBQ3JCO29CQUNFLE1BQU0sRUFBRSxJQUFJO2lCQUNiLENBQ0YsQ0FBQzthQUNIO2lCQUFNLElBQUksYUFBYSxDQUFDLE1BQU0sRUFBRTtnQkFDL0IsTUFBTSxHQUFHLE1BQU0sYUFBYSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUNBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO29CQUN6RixTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7b0JBQy9CLFNBQVMsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVM7aUJBQzNDLENBQUMsQ0FBQztnQkFFSCwrQ0FBK0M7Z0JBQy9DLHlEQUF5RDtnQkFDekQsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7b0JBQ3pCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FDbkIsb0JBQVcsQ0FDVCxtRUFBbUUsRUFDbkUsVUFBVSxDQUFDLFNBQVMsQ0FDckIsQ0FDRixDQUFDO2lCQUNIO2FBQ0Y7WUFFRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFO2dCQUN2QixVQUFVLENBQUMsV0FBVyxDQUFDO29CQUNyQixVQUFVLEVBQUUsQ0FBQztvQkFDYixLQUFLLEVBQUUsYUFBYTtpQkFDckIsQ0FBQyxDQUFDO2dCQUNILE9BQU8sQ0FBQyxDQUFDO2FBQ1Y7aUJBQU07Z0JBQ0wsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLG9CQUFXLENBQUMsd0JBQXdCLE1BQU0sRUFBRSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQzVGO1NBQ0Y7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUU7Z0JBQ3BCLElBQUksT0FBTyxHQUFHLEVBQUUsRUFBRTtvQkFDaEIsTUFBTSxvQkFBVyxDQUFDLGdEQUFnRCxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDM0Y7Z0JBQ0QsT0FBTyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDL0Q7WUFDRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0NBQUE7QUFFRCxTQUFlLGlCQUFpQixDQUM5QixhQUE4QixFQUM5QixVQUE4Qjs7UUFFOUIsSUFBSTtZQUNGLHFEQUFxRDtZQUNyRCxNQUFNLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGlDQUFlLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO2dCQUN4RixNQUFNLEVBQUUsSUFBSTtnQkFDWixVQUFVLEVBQUUsS0FBSzthQUNsQixDQUFDLENBQUM7WUFFSCxPQUFPLE1BQU0sZ0JBQWdCLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzFEO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixVQUFVLENBQUMsV0FBVyxDQUFDO2dCQUNyQixTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7Z0JBQy9CLEtBQUssRUFBRSxDQUFDO2dCQUNSLFVBQVUsRUFBRSxDQUFDO2FBQ2QsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLENBQUM7U0FDVjtJQUNILENBQUM7Q0FBQTtBQUVELFNBQXNCLGlCQUFpQixDQUNyQyxhQUE4QixFQUM5QixVQUE4QixFQUM5QixPQUFPLEdBQUcsQ0FBQzs7UUFFWCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDO1FBRW5DLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ3BCLFVBQVUsQ0FBQyxXQUFXLENBQUM7Z0JBQ3JCLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztnQkFDL0IsS0FBSyxFQUFFLGFBQWE7Z0JBQ3BCLFVBQVUsRUFBRSxDQUFDO2FBQ2QsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUVELGFBQWE7UUFDYixJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxLQUFLLENBQUMsRUFBRTtZQUNyQyxPQUFPLE1BQU0sY0FBYyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUNuRSxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQzdDLENBQUM7WUFFRixZQUFZO1NBQ2I7YUFBTSxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxLQUFLLENBQUMsRUFBRTtZQUM1QyxPQUFPLE1BQU0saUJBQWlCLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxPQUFPLEdBQUcsRUFBRSxFQUFFO1lBQ2hCLElBQUk7Z0JBQ0YsK0JBQStCO2dCQUMvQixpRUFBaUU7Z0JBQ2pFLE1BQU0sb0JBQVcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQztnQkFFN0UsT0FBTyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDaEU7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDMUI7U0FDRjthQUFNO1lBQ0wsTUFBTSxvQkFBVyxDQUFDLHdFQUF3RSxDQUFDLENBQUM7U0FDN0Y7SUFDSCxDQUFDO0NBQUE7QUF4Q0QsOENBd0NDIn0=