/// <reference types="node" />
import { EventEmitter } from 'events';
import { Binary, Collection, ObjectId } from 'mongodb';
import { Document, Model, Schema } from 'mongoose';
import { AssignerOptions, AssignerPluginOptions, FieldConfig } from './assigner.interfaces';
import { SchemaState } from './LocalStateStore';
/**
 * Options stored in db, plus modelName
 */
export interface NormalisedOptions {
    modelName: string;
    network: boolean;
    timestamp?: number | null;
    fields?: Map<string, FieldConfig>;
    discriminators?: Map<string, Map<string, FieldConfig>>;
}
/**
 * The numbers also depict what you receive upon from readyState
 * @event 1. ready - If the init process is complete
 * @event 2. init - Initialising the idAssigner
 * @event 0. unready - Init process not started
 * @event -1. error - Init process error out
 */
export declare class MongooseIdAssigner extends EventEmitter {
    readonly schema: Schema;
    readonly modelName: string;
    readonly discriminatorKey: string;
    readonly retryTime: number;
    readonly retryMillis: number;
    readonly options: NormalisedOptions;
    constructor(schema: Schema, options: AssignerPluginOptions);
    get readyState(): number;
    get state(): SchemaState;
    get collection(): Collection<AssignerOptions>;
    static plugin(schema: Schema, options: AssignerPluginOptions): MongooseIdAssigner;
    refreshOptions(): Promise<void>;
    getFieldConfig(field: string, discriminator?: string): FieldConfig | undefined;
    getNextId(field: string, discriminator?: string): Promise<void | ObjectId | Binary | string | number | Promise<number> | Promise<string>>;
    appendState(state: Partial<SchemaState>): void;
    initialise(modelInstance: Model<Document>): Promise<number>;
}
